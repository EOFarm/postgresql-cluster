---

 - assert:
     that: 
     - replication.role == 'standby'
     - replication.standby.master_host in groups.all
 
 - wait_for: host={{replication.standby.master_host}} port=5432 state=started

 # Take a basebackup from master node
 
 - name: Create backup dir for basebackup on master
   file: path={{basebackup_dir}} owner=postgres group=postgres mode=0700 state=directory

 - name: Take basebackup, output each data directory to a separate TAR archive
   command: pg_basebackup -h {{replication.standby.master_host}} -U {{replication.user}} -Ft -R -v -D {{basebackup_dir}} 
   become: yes
   become_user: postgres

 # Restore basebackup here (standby node)
 
 #- wait_for: path=/tmp/restore-basebackup state=present
 
 - name: List tablespace oids found in basebackup
   shell: cd {{basebackup_dir}} && ls -1| awk '/^[1-9][0-9]*\.tar/{sub(/\.tar$/, ""); print}'
   register: tablespace_oids_result

 - set_fact:
     tablespace_oids: '{{tablespace_oids_result.stdout_lines}}'

 - name: Remove existing data directories
   file: path={{item}} state=absent
   with_items: '{{[data_dir] + (postgres.tablespaces| map(attribute="path")| list)}}'

 - name: Create empty data directories 
   file: path={{item}} state=directory owner=postgres group=postgres mode=0700
   with_items: '{{[data_dir] + (postgres.tablespaces| map(attribute="path")| list)}}'

 - name: Unpack root backup into main data directory
   shell: cd {{data_dir}} && tar xvf {{basebackup_dir}}/base.tar
   become: yes
   become_user: postgres
 
 - name: Use oid-tablespace map
   shell: cat {{data_dir}}/tablespace_map
   register: tablespace_map

 - name: Unpack tablespace backups into their directories
   shell: cd {{tablespace_dir}} && tar xvf {{basebackup_dir}}/{{oid}}.tar
   become: yes
   become_user: postgres
   with_items: '{{tablespace_map.stdout_lines}}'
   vars:
     oid: '{{ item.split(" ")[0] }}'
     tablespace_dir: '{{ item.split(" ")[1] }}'

 - name: Edit recovery.conf for standby
   lineinfile:
     create: no
     state: present
     dest: '{{data_dir}}/recovery.conf'
     line: "{{item.key}} = '{{item.value}}'"
     regexp: '^{{item.key}}[ ]*='
     insertafter: EOF
   become: yes
   become_user: postgres
   with_dict:
     standby_mode: 'on'
     trigger_file: 'trigger-failover'
     restore_command: 'rsync --password-file={{config_dir}}/rsync-password rsync://postgres@{{replication.standby.master_host}}/postgresql-archive/%f %p'

 # Cleanup
   
 - name: Remove basebackup archives
   file: path={{basebackup_dir}} state=absent

